{"version":3,"sources":["App.tsx","useInterval.ts","reportWebVitals.ts","index.tsx"],"names":["rain","dropCounter","drops","i","x","Math","random","y","distance","sqrt","isInside","push","xy","result","Float32Array","length","start","stop","step","CIRCLE_PATH","Array","from","_","map","join","App","React","useState","raindrops","setRaindrops","interval","setInterval","callback","delay","intervalRef","useRef","callbackRef","useEffect","current","window","clearInterval","useInterval","dropsInside","filter","d","dropsOutside","approximation","dropRain","AppBar","position","Toolbar","Typography","variant","Container","Grid","container","item","xs","justify","data","type","marker","color","layout","xaxis","range","dtick","yaxis","shapes","path","line","width","height","title","showlegend","direction","alignItems","style","Box","display","justifyContent","ButtonGroup","disabled","Button","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8c79dc9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { AppBar, Box, Button, ButtonGroup, Container, Grid, Toolbar, Typography } from \"@material-ui/core\";\nimport { useInterval } from \"./useInterval\";\nimport Plot from 'react-plotly.js';\n\ninterface Raindrop {\n  x: number;\n  y: number;\n  distance: number;\n  isInside: boolean;\n}\n\n// generate random X-Y values and determine if they are inside or outside the circle\nfunction rain(dropCounter: number): Raindrop[] {\n  const drops = [];\n\n  for (let i = 0; i < dropCounter; i++) {\n    const x = Math.random();\n    const y = Math.random();\n    const distance = Math.sqrt(x * x + y * y);\n    const isInside = distance < 1.0;\n\n    drops.push({\n      x,\n      y,\n      distance,\n      isInside\n    });\n  }\n\n  return drops;\n}\n\n// generate the X-Y array for the point clouds\nfunction xy(drops: Raindrop[]): Float32Array {\n  const result = new Float32Array(2 * drops.length)\n\n  for (let i = 0; i < drops.length; i++) {\n    result[i * 2] = drops[i].x;\n    result[i * 2 + 1] = drops[i].y;\n  }\n\n  return result;\n}\n\n// calculate Y of X to draw the circle\nfunction y(x: number) {\n  return Math.sqrt(1 - (x * x));\n}\n\n// generate a sequence of numbers\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#sequence_generator_range\nfunction range(start: number, stop: number, step: number) {\n  return Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + (i * step));\n}\n\n// circle SVG path\nconst CIRCLE_PATH = 'M0,1 ' + range(0, 1, 0.001).map(x => `L${x},${y(x)}`).join(' ');\n\nfunction App() {\n  const [raindrops, setRaindrops] = React.useState<Raindrop[]>([]);\n  const [interval, setInterval] = React.useState<number | null>(null);\n\n  // rain interval\n  useInterval(() => {\n    setRaindrops((raindrops) => [...raindrops, ...rain(100)]);\n  }, interval);\n\n  const dropsInside = raindrops.filter(d => d.isInside);\n  const dropsOutside = raindrops.filter(d => !d.isInside);\n  const approximation = 4 * (dropsInside.length / raindrops.length);\n\n  const dropRain = (dropCounter: number) => () => setRaindrops((raindrops) => [...raindrops, ...rain(dropCounter)]);\n  const startRain = () => setInterval(500);\n  const stopRain = () => setInterval(null);\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">Monte Carlo Pi Simulation</Typography>\n        </Toolbar>\n      </AppBar>\n      <Container>\n        <Grid container>\n          <Grid container item xs={6} justify=\"flex-end\">\n            <Plot\n              data={[\n                {\n                  xy: xy(dropsInside),\n                  type: 'pointcloud',\n                  marker: { color: 'blue' },\n                },\n                {\n                  xy: xy(dropsOutside),\n                  type: 'pointcloud',\n                  marker: { color: 'red' },\n                }\n              ]}\n              layout={{\n                xaxis: {\n                  range: [0, 1],\n                  dtick: 0.2,\n                },\n                yaxis: {\n                  range: [0, 1],\n                  dtick: 0.2,\n                },\n                shapes: [\n                  {\n                    type: 'path',\n                    path: CIRCLE_PATH,\n                    line: {\n                      color: 'black'\n                    }\n                  },\n                ],\n                width: 400,\n                height: 400,\n                title: 'Approximtion of Pi',\n                showlegend: false\n              }}\n            />\n          </Grid>\n          <Grid container item xs={6} justify=\"center\" direction=\"column\" alignItems=\"flex-start\">\n            <Typography variant=\"body1\">Raindrops: {raindrops.length}</Typography>\n            <Typography variant=\"body1\" style={{ color: 'blue' }}>Inside: {dropsInside.length}</Typography>\n            <Typography variant=\"body1\" style={{ color: 'red' }}>Outside: {dropsOutside.length}</Typography>\n\n            <Typography variant=\"body1\">\n              <br />\n              Approximation of Pi:\n              <br />\n              Ï€ = 4 * ( Inside / Outside ) = {approximation}\n            </Typography>\n          </Grid>\n        </Grid>\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          <Typography variant=\"body1\">Add Raindrop:</Typography>\n\n          <ButtonGroup disabled={interval !== null} variant=\"outlined\" color=\"primary\">\n            <Button onClick={dropRain(1)}>1</Button>\n            <Button onClick={dropRain(10)}>10</Button>\n            <Button onClick={dropRain(100)}>100</Button>\n            <Button onClick={dropRain(1000)}>1000</Button>\n          </ButtonGroup>\n        </Box>\n\n        <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\">\n          <Typography variant=\"body1\">Let It Rain:</Typography>\n\n          {interval === null ? (\n            <Button variant=\"outlined\" color=\"primary\" onClick={startRain}>Start</Button>\n          ) : (\n            <Button variant=\"outlined\" color=\"primary\" onClick={stopRain}>Stop</Button>\n          )}\n        </Box>\n\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React, { useEffect, useRef } from \"react\";\n\n/**\n * Use setInterval with Hooks in a declarative way.\n *\n * @see https://stackoverflow.com/a/59274004/3723993\n * @see https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nexport function useInterval(\n  callback: React.EffectCallback,\n  delay: number | null\n): React.MutableRefObject<number | null> {\n  const intervalRef = useRef<number | null>(null);\n  const callbackRef = useRef(callback);\n\n  // Remember the latest callback:\n  //\n  // Without this, if you change the callback, when setInterval ticks again, it\n  // will still call your old callback.\n  //\n  // If you add `callback` to useEffect's deps, it will work fine but the\n  // interval will be reset.\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  // Set up the interval:\n\n  useEffect(() => {\n    if (typeof delay === \"number\") {\n      intervalRef.current = window.setInterval(\n        () => callbackRef.current(),\n        delay\n      );\n\n      // Clear interval if the components is unmounted or the delay changes:\n      return () => window.clearInterval(intervalRef.current || 0);\n    }\n  }, [delay]);\n\n  // In case you want to manually clear the interval from the consuming component...:\n  return intervalRef;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}