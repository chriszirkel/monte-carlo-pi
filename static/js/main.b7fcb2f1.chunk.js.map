{"version":3,"sources":["App.tsx","useDimensions.ts","useInterval.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","pi","display","flexDirection","alignItems","justifyContent","textAlign","order","breakpoints","down","plot","margin","buttons","position","bottom","zIndex","rain","dropCounter","drops","i","x","Math","random","y","distance","sqrt","isInside","push","xy","result","Float32Array","length","start","stop","step","CIRCLE_PATH","Array","from","_","map","join","App","classes","React","useState","raindrops","setRaindrops","interval","setInterval","dimensions","setDimensions","useCallback","node","getBoundingClientRect","useDimensions","ref","callback","delay","intervalRef","useRef","callbackRef","useEffect","current","window","clearInterval","useInterval","dropsInside","filter","d","dropsOutside","approximation","dropRain","AppBar","color","Toolbar","style","Typography","variant","IconButton","href","target","Grid","container","item","xs","sm","className","padding","Box","ButtonGroup","Button","disabled","onClick","data","type","name","marker","layout","xaxis","range","dtick","fixedrange","rangemode","yaxis","shapes","path","line","dash","width","height","autosize","l","r","b","t","showlegend","uirevision","hovermode","annotations","xref","yref","xanchor","yanchor","text","showarrow","font","size","config","displayModeBar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","primary","main","blue","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b7fcb2f1.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  Box,\n  Button,\n  ButtonGroup,\n  createStyles,\n  Grid,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport { useInterval } from \"./useInterval\";\nimport Plot from \"react-plotly.js\";\nimport { useDimensions } from \"./useDimensions\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    pi: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      textAlign: \"center\",\n\n      order: 2,\n      [theme.breakpoints.down(\"xs\")]: {\n        order: 1,\n      },\n    },\n    plot: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      margin: \"8px 0\",\n\n      order: 1,\n      [theme.breakpoints.down(\"xs\")]: {\n        order: 2,\n      },\n    },\n    buttons: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      margin: \"24px 8px\",\n\n      [theme.breakpoints.down(\"xs\")]: {\n        position: \"absolute\",\n        bottom: 0,\n        zIndex: 2000,\n      },\n    },\n  })\n);\ninterface Raindrop {\n  x: number;\n  y: number;\n  distance: number;\n  isInside: boolean;\n}\n\n// generate random X-Y values and determine if they are inside or outside the circle\nfunction rain(dropCounter: number): Raindrop[] {\n  const drops = [];\n\n  for (let i = 0; i < dropCounter; i++) {\n    const x = Math.random();\n    const y = Math.random();\n    const distance = Math.sqrt(x * x + y * y);\n    const isInside = distance < 1.0;\n\n    drops.push({\n      x,\n      y,\n      distance,\n      isInside,\n    });\n  }\n\n  return drops;\n}\n\n// generate the X-Y array for the point clouds\nfunction xy(drops: Raindrop[]): Float32Array {\n  const result = new Float32Array(2 * drops.length);\n\n  for (let i = 0; i < drops.length; i++) {\n    result[i * 2] = drops[i].x;\n    result[i * 2 + 1] = drops[i].y;\n  }\n\n  return result;\n}\n\n// calculate Y of X to draw the quarter circle path\nfunction y(x: number) {\n  return Math.sqrt(1 - x * x);\n}\n\n// generate a sequence of numbers\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#sequence_generator_range\nfunction range(start: number, stop: number, step: number) {\n  return Array.from(\n    { length: (stop - start) / step + 1 },\n    (_, i) => start + i * step\n  );\n}\n\n// circle SVG path\nconst CIRCLE_PATH =\n  \"M0,1 \" +\n  range(0, 1, 0.001)\n    .map((x) => `L${x},${y(x)}`)\n    .join(\" \");\n\nfunction App() {\n  const classes = useStyles();\n  const [raindrops, setRaindrops] = React.useState<Raindrop[]>([]);\n  const [interval, setInterval] = React.useState<number | null>(null);\n  const [dimensions, ref] = useDimensions();\n\n  // rain interval\n  useInterval(() => {\n    setRaindrops((raindrops) => [...raindrops, ...rain(1000)]);\n  }, interval);\n\n  const dropsInside = raindrops.filter((d) => d.isInside);\n  const dropsOutside = raindrops.filter((d) => !d.isInside);\n  const approximation = 4 * (dropsInside.length / raindrops.length) || 0;\n\n  const dropRain = (dropCounter: number) => () =>\n    setRaindrops((raindrops) => [...raindrops, ...rain(dropCounter)]);\n  const startRain = () => setInterval(500);\n  const stopRain = () => setInterval(null);\n\n  return (\n    <>\n      <AppBar color=\"primary\" position=\"static\">\n        <Toolbar style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <Typography variant=\"h6\">\n            Interactive Monte Carlo Simulation\n          </Typography>\n          <IconButton\n            style={{ color: \"white\" }}\n            href=\"https://github.com/chriszirkel/monte-carlo-pi\"\n            target=\"_blank\"\n          >\n            <GitHubIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n\n      <Grid container>\n        <Grid item xs={12} sm={6} className={classes.pi}>\n          <Typography variant=\"h6\" style={{ padding: \"8px\" }}>\n            <span>Approximation of Pi:</span>\n            <br />\n            <span>π = 4 * (</span>\n            <span style={{ color: \"blue\" }}>\n              {dropsInside.length || \"Raindrops Inside\"}\n            </span>\n            <span>/</span>\n            <span style={{ color: \"black\" }}>\n              {raindrops.length || \"Raindrops Total\"}\n            </span>\n            <span>)</span>\n            <br />\n            <b>{approximation}</b>\n          </Typography>\n\n          <Box className={classes.buttons}>\n            <Typography variant=\"h6\">Add Raindrops</Typography>\n\n            <ButtonGroup variant=\"contained\" color=\"primary\">\n              <Button disabled={interval !== null} onClick={dropRain(1)}>\n                1\n              </Button>\n              <Button disabled={interval !== null} onClick={dropRain(10)}>\n                10\n              </Button>\n              <Button disabled={interval !== null} onClick={dropRain(100)}>\n                100\n              </Button>\n              <Button disabled={interval !== null} onClick={dropRain(1000)}>\n                1000\n              </Button>\n              {interval === null ? (\n                <Button variant=\"contained\" color=\"primary\" onClick={startRain}>\n                  Let It Rain\n                </Button>\n              ) : (\n                <Button variant=\"contained\" color=\"primary\" onClick={stopRain}>\n                  Stop The Rain\n                </Button>\n              )}\n            </ButtonGroup>\n          </Box>\n        </Grid>\n        <Grid ref={ref} item xs={12} sm={6} className={classes.plot}>\n          <Typography variant=\"body1\">Raindrops: {raindrops.length}</Typography>\n          <Plot\n            data={[\n              {\n                xy: xy(dropsInside),\n                type: \"pointcloud\",\n                name: \"Inside\",\n                marker: { color: \"blue\" },\n              },\n              {\n                xy: xy(dropsOutside),\n                name: \"Outside\",\n                type: \"pointcloud\",\n                marker: { color: \"red\" },\n              },\n            ]}\n            layout={{\n              xaxis: {\n                range: [0, 1],\n                dtick: 0.5,\n                fixedrange: true,\n                rangemode: \"nonnegative\",\n              },\n              yaxis: {\n                range: [0, 1],\n                dtick: 0.5,\n                fixedrange: true,\n                rangemode: \"nonnegative\",\n              },\n              shapes: [\n                {\n                  type: \"path\",\n                  path: \"M1,1 L1,0\",\n                  line: {\n                    dash: \"dot\",\n                    color: \"black\",\n                  },\n                },\n                {\n                  type: \"path\",\n                  path: \"M0,1 L1,1\",\n                  line: {\n                    dash: \"dot\",\n                    color: \"black\",\n                  },\n                },\n                {\n                  type: \"path\",\n                  path: CIRCLE_PATH,\n                  line: {\n                    color: \"black\",\n                  },\n                },\n                // {\n                //   type: 'circle',\n                //   xref: 'x',\n                //   yref: 'y',\n                //   x0: -1,\n                //   y0: -1,\n                //   x1: 1,\n                //   y1: 1,\n                //   line: {\n                //     color: 'black'\n                //   },\n                // }\n              ],\n              width: dimensions?.width,\n              height: dimensions?.width,\n              autosize: true,\n              margin: {\n                l: 25,\n                r: 25,\n                b: 25,\n                t: 25,\n              },\n              showlegend: false,\n              uirevision: false,\n              hovermode: false,\n              annotations: [\n                {\n                  xref: \"paper\",\n                  yref: \"paper\",\n                  x: 1,\n                  xanchor: \"right\",\n                  y: 1,\n                  yanchor: \"bottom\",\n                  text: `Outside: ${dropsOutside.length}`,\n                  showarrow: false,\n                  font: {\n                    size: 14,\n                    color: \"red\",\n                  },\n                },\n                {\n                  xref: \"paper\",\n                  yref: \"paper\",\n                  x: 0,\n                  xanchor: \"left\",\n                  y: 1,\n                  yanchor: \"bottom\",\n                  text: `Inside: ${dropsInside.length}`,\n                  showarrow: false,\n                  font: {\n                    size: 14,\n                    color: \"blue\",\n                  },\n                },\n              ],\n            }}\n            config={{\n              displayModeBar: false,\n            }}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\n/**\n * Get dimensions of HTML element.\n *\n * @see https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\n * @see https://stackoverflow.com/questions/59873782/how-would-you-correctly-set-up-a-typescript-declaration-when-using-usecallback\n */\nexport function useDimensions() {\n  const [dimensions, setDimensions] = React.useState<DOMRect | null>(null);\n\n  const ref = React.useCallback((node: HTMLElement | null) => {\n    if (node !== null) {\n      setDimensions(node.getBoundingClientRect());\n    }\n  }, []);\n\n  return [dimensions, ref] as const;\n}\n","import React, { useEffect, useRef } from \"react\";\n\n/**\n * Use setInterval with Hooks in a declarative way.\n *\n * @see https://stackoverflow.com/a/59274004/3723993\n * @see https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nexport function useInterval(\n  callback: React.EffectCallback,\n  delay: number | null\n): React.MutableRefObject<number | null> {\n  const intervalRef = useRef<number | null>(null);\n  const callbackRef = useRef(callback);\n\n  // Remember the latest callback:\n  //\n  // Without this, if you change the callback, when setInterval ticks again, it\n  // will still call your old callback.\n  //\n  // If you add `callback` to useEffect's deps, it will work fine but the\n  // interval will be reset.\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  // Set up the interval:\n\n  useEffect(() => {\n    if (typeof delay === \"number\") {\n      intervalRef.current = window.setInterval(\n        () => callbackRef.current(),\n        delay\n      );\n\n      // Clear interval if the components is unmounted or the delay changes:\n      return () => window.clearInterval(intervalRef.current || 0);\n    }\n  }, [delay]);\n\n  // In case you want to manually clear the interval from the consuming component...:\n  return intervalRef;\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport createTheme from \"@material-ui/core/styles/createTheme\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { blue } from \"@material-ui/core/colors\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: blue[900],\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}