{"version":3,"sources":["App.tsx","useDimensions.ts","useInterval.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","pi","display","flexDirection","alignItems","justifyContent","textAlign","order","breakpoints","down","plot","margin","buttons","position","bottom","random","Math","rain","dropCounter","drops","i","x","y","distance","sqrt","isInside","push","xy","result","Float32Array","length","start","stop","step","Array","from","_","map","join","App","classes","React","useState","raindrops","setRaindrops","interval","setInterval","dimensions","setDimensions","useCallback","node","getBoundingClientRect","console","log","useDimensions","ref","callback","delay","intervalRef","useRef","callbackRef","useEffect","current","window","clearInterval","useInterval","dropsInside","filter","d","dropsOutside","approximation","dropRain","AppBar","Toolbar","style","Typography","variant","Grid","container","item","xs","sm","className","padding","color","Box","ButtonGroup","Button","disabled","onClick","data","type","name","marker","layout","xaxis","range","dtick","fixedrange","rangemode","yaxis","shapes","xref","yref","x0","y0","x1","y1","line","width","height","autosize","l","r","b","t","showlegend","uirevision","hovermode","annotations","xanchor","yanchor","text","showarrow","font","size","config","displayModeBar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4cc4c58.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { AppBar, Box, Button, ButtonGroup, createStyles, Grid, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\nimport { useInterval } from \"./useInterval\";\nimport Plot from 'react-plotly.js';\nimport { useDimensions } from \"./useDimensions\";\n\nconst useStyles = makeStyles((theme) => createStyles({\n  pi: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n\n    order: 2,\n    [theme.breakpoints.down('xs')]: {\n      order: 1,\n    },\n  },\n  plot: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    margin: '8px 0',\n\n    order: 1,\n    [theme.breakpoints.down('xs')]: {\n      order: 2,\n    },\n  },\n  buttons: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    margin: '24px 8px',\n\n    [theme.breakpoints.down('xs')]: {\n      position: 'absolute',\n      bottom: 0,\n    },\n  },\n}));\n\ninterface Raindrop {\n  x: number;\n  y: number;\n  distance: number;\n  isInside: boolean;\n}\n\n// generate random number from -1 to 1\nfunction random(): number {\n  return Math.random() * (Math.random() < 0.5 ? -1 : 1);\n}\n\n// generate random X-Y values and determine if they are inside or outside the circle\nfunction rain(dropCounter: number): Raindrop[] {\n  const drops = [];\n\n  for (let i = 0; i < dropCounter; i++) {\n    const x = random();\n    const y = random();\n    const distance = Math.sqrt(x * x + y * y);\n    const isInside = distance < 1.0;\n\n    drops.push({\n      x,\n      y,\n      distance,\n      isInside\n    });\n  }\n\n  return drops;\n}\n\n// generate the X-Y array for the point clouds\nfunction xy(drops: Raindrop[]): Float32Array {\n  const result = new Float32Array(2 * drops.length)\n\n  for (let i = 0; i < drops.length; i++) {\n    result[i * 2] = drops[i].x;\n    result[i * 2 + 1] = drops[i].y;\n  }\n\n  return result;\n}\n\n// calculate Y of X to draw the circle\nfunction y(x: number) {\n  return Math.sqrt(1 - (x * x));\n}\n\n// generate a sequence of numbers\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#sequence_generator_range\nfunction range(start: number, stop: number, step: number) {\n  return Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + (i * step));\n}\n\n// circle SVG path\nconst CIRCLE_PATH = 'M0,1 ' + range(0, 1, 0.001).map(x => `L${x},${y(x)}`).join(' ');\n\nfunction App() {\n  const classes = useStyles();\n  const [raindrops, setRaindrops] = React.useState<Raindrop[]>([]);\n  const [interval, setInterval] = React.useState<number | null>(null);\n  const [dimensions, ref] = useDimensions();\n  // rain interval\n  useInterval(() => {\n    setRaindrops((raindrops) => [...raindrops, ...rain(100)]);\n  }, interval);\n\n  const dropsInside = raindrops.filter(d => d.isInside);\n  const dropsOutside = raindrops.filter(d => !d.isInside);\n  const approximation = 4 * (dropsInside.length / raindrops.length) || 0;\n\n  const dropRain = (dropCounter: number) => () => setRaindrops((raindrops) => [...raindrops, ...rain(dropCounter)]);\n  const startRain = () => setInterval(500);\n  const stopRain = () => setInterval(null);\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar style={{ display: 'flex', justifyContent: 'space-between' }}>\n          <Typography variant=\"h6\">Monte Carlo Pi Simulation</Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Grid container>\n        <Grid item xs={12} sm={6} className={classes.pi}>\n          <Typography variant=\"h6\" style={{ padding: '8px', }}>\n            Approximation of Pi:<br />\n              Ï€ = 4 * ( <span style={{ color: 'blue' }}>{dropsInside.length || 'Raindrops Inside'}</span> / <span style={{ color: 'black' }}>{raindrops.length || 'Raindrops Total'}</span> )<br />\n            <b>{approximation}</b>\n          </Typography>\n\n          <Box className={classes.buttons}>\n            <Typography variant=\"h6\">Add Raindrops</Typography>\n\n            <ButtonGroup variant=\"contained\" color=\"primary\">\n              <Button disabled={interval !== null} onClick={dropRain(1)}>1</Button>\n              <Button disabled={interval !== null} onClick={dropRain(10)}>10</Button>\n              <Button disabled={interval !== null} onClick={dropRain(100)}>100</Button>\n              <Button disabled={interval !== null} onClick={dropRain(1000)}>1000</Button>\n              {interval === null ? (\n                <Button variant=\"contained\" color=\"primary\" onClick={startRain}>Let It Rain</Button>\n              ) : (\n                <Button variant=\"contained\" color=\"primary\" onClick={stopRain}>Stop The Rain</Button>\n              )}\n            </ButtonGroup>\n          </Box>\n        </Grid>\n        <Grid ref={ref} item xs={12} sm={6} className={classes.plot}>\n          <Typography variant=\"body1\">\n            Raindrops: {raindrops.length}\n          </Typography>\n          <Plot\n            data={[\n              {\n                xy: xy(dropsInside),\n                type: 'pointcloud',\n                name: 'Inside',\n                marker: { color: 'blue' },\n              },\n              {\n                xy: xy(dropsOutside),\n                name: 'Outside',\n                type: 'pointcloud',\n                marker: { color: 'red' },\n              }\n            ]}\n            layout={{\n              xaxis: {\n                range: [-1, 1],\n                dtick: 0.5,\n                fixedrange: true,\n                rangemode: \"nonnegative\",\n              },\n              yaxis: {\n                range: [-1, 1],\n                dtick: 0.5,\n                fixedrange: true,\n                rangemode: \"nonnegative\",\n              },\n              shapes: [\n                // {\n                //   type: 'path',\n                //   path: CIRCLE_PATH,\n                //   line: {\n                //     color: 'black'\n                //   }\n                // },\n                {\n                  type: 'circle',\n                  xref: 'x',\n                  yref: 'y',\n                  x0: -1,\n                  y0: -1,\n                  x1: 1,\n                  y1: 1,\n                  line: {\n                    color: 'black'\n                  },\n                }\n              ],\n              width: dimensions?.width,\n              height: dimensions?.width,\n              autosize: true,\n              margin: {\n                l: 25,\n                r: 25,\n                b: 25,\n                t: 25,\n              },\n              showlegend: false,\n              uirevision: false,\n              hovermode: false,\n              annotations: [\n                {\n                  xref: 'paper',\n                  yref: 'paper',\n                  x: 1,\n                  xanchor: 'right',\n                  y: 1,\n                  yanchor: 'bottom',\n                  text: `Outside: ${dropsOutside.length}`,\n                  showarrow: false,\n                  font: {\n                    size: 14,\n                    color: 'red'\n                  }\n                },\n                {\n                  xref: 'paper',\n                  yref: 'paper',\n                  x: 0,\n                  xanchor: 'left',\n                  y: 1,\n                  yanchor: 'bottom',\n                  text: `Inside: ${dropsInside.length}`,\n                  showarrow: false,\n                  font: {\n                    size: 14,\n                    color: 'blue'\n                  }\n                }\n              ]\n            }}\n            config={{\n              displayModeBar: false\n            }}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\n// https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\n// https://stackoverflow.com/questions/59873782/how-would-you-correctly-set-up-a-typescript-declaration-when-using-usecallback\nexport function useDimensions() {\n  const [dimensions, setDimensions] = React.useState<ClientRect | null>(null);\n\n  const ref = React.useCallback((node: HTMLElement | null) => {\n    if (node !== null) {\n      setDimensions(node.getBoundingClientRect());\n      console.log(node.getBoundingClientRect());\n    }\n  }, []);\n\n  return [dimensions, ref] as const;\n}\n","import React, { useEffect, useRef } from \"react\";\n\n/**\n * Use setInterval with Hooks in a declarative way.\n *\n * @see https://stackoverflow.com/a/59274004/3723993\n * @see https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nexport function useInterval(\n  callback: React.EffectCallback,\n  delay: number | null\n): React.MutableRefObject<number | null> {\n  const intervalRef = useRef<number | null>(null);\n  const callbackRef = useRef(callback);\n\n  // Remember the latest callback:\n  //\n  // Without this, if you change the callback, when setInterval ticks again, it\n  // will still call your old callback.\n  //\n  // If you add `callback` to useEffect's deps, it will work fine but the\n  // interval will be reset.\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  // Set up the interval:\n\n  useEffect(() => {\n    if (typeof delay === \"number\") {\n      intervalRef.current = window.setInterval(\n        () => callbackRef.current(),\n        delay\n      );\n\n      // Clear interval if the components is unmounted or the delay changes:\n      return () => window.clearInterval(intervalRef.current || 0);\n    }\n  }, [delay]);\n\n  // In case you want to manually clear the interval from the consuming component...:\n  return intervalRef;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}