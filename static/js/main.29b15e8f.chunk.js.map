{"version":3,"sources":["App.tsx","useDimensions.ts","useInterval.ts","reportWebVitals.ts","index.tsx"],"names":["rain","dropCounter","drops","i","x","Math","random","y","distance","sqrt","isInside","push","xy","result","Float32Array","length","start","stop","step","CIRCLE_PATH","Array","from","_","map","join","App","React","useState","raindrops","setRaindrops","interval","setInterval","dimensions","setDimensions","useCallback","node","getBoundingClientRect","console","log","useDimensions","ref","callback","delay","intervalRef","useRef","callbackRef","useEffect","current","window","clearInterval","useInterval","dropsInside","filter","d","dropsOutside","approximation","dropRain","AppBar","position","Toolbar","Typography","variant","style","padding","justifyContent","ButtonGroup","color","size","Button","disabled","onClick","textAlign","Container","Divider","data","type","name","marker","layout","xaxis","range","dtick","fixedrange","rangemode","yaxis","shapes","path","line","width","height","autosize","margin","l","r","b","t","showlegend","annotations","xref","yref","xanchor","yanchor","text","showarrow","font","config","displayModeBar","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29b15e8f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { AppBar, Box, Button, ButtonGroup, Container, Divider, Grid, Toolbar, Typography } from \"@material-ui/core\";\nimport { useInterval } from \"./useInterval\";\nimport Plot from 'react-plotly.js';\nimport { useDimensions } from \"./useDimensions\";\n\ninterface Raindrop {\n  x: number;\n  y: number;\n  distance: number;\n  isInside: boolean;\n}\n\n// generate random X-Y values and determine if they are inside or outside the circle\nfunction rain(dropCounter: number): Raindrop[] {\n  const drops = [];\n\n  for (let i = 0; i < dropCounter; i++) {\n    const x = Math.random();\n    const y = Math.random();\n    const distance = Math.sqrt(x * x + y * y);\n    const isInside = distance < 1.0;\n\n    drops.push({\n      x,\n      y,\n      distance,\n      isInside\n    });\n  }\n\n  return drops;\n}\n\n// generate the X-Y array for the point clouds\nfunction xy(drops: Raindrop[]): Float32Array {\n  const result = new Float32Array(2 * drops.length)\n\n  for (let i = 0; i < drops.length; i++) {\n    result[i * 2] = drops[i].x;\n    result[i * 2 + 1] = drops[i].y;\n  }\n\n  return result;\n}\n\n// calculate Y of X to draw the circle\nfunction y(x: number) {\n  return Math.sqrt(1 - (x * x));\n}\n\n// generate a sequence of numbers\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from#sequence_generator_range\nfunction range(start: number, stop: number, step: number) {\n  return Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + (i * step));\n}\n\n// circle SVG path\nconst CIRCLE_PATH = 'M0,1 ' + range(0, 1, 0.001).map(x => `L${x},${y(x)}`).join(' ');\n\nfunction App() {\n  const [raindrops, setRaindrops] = React.useState<Raindrop[]>([]);\n  const [interval, setInterval] = React.useState<number | null>(null);\n  const [dimensions, ref] = useDimensions();\n  // rain interval\n  useInterval(() => {\n    setRaindrops((raindrops) => [...raindrops, ...rain(100)]);\n  }, interval);\n\n  const dropsInside = raindrops.filter(d => d.isInside);\n  const dropsOutside = raindrops.filter(d => !d.isInside);\n  const approximation = 4 * (dropsInside.length / raindrops.length);\n\n  const dropRain = (dropCounter: number) => () => setRaindrops((raindrops) => [...raindrops, ...rain(dropCounter)]);\n  const startRain = () => setInterval(500);\n  const stopRain = () => setInterval(null);\n\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">Monte Carlo Pi Simulation</Typography>\n        </Toolbar>\n      </AppBar>\n\n      <Toolbar variant=\"dense\" style={{ padding: '8px', justifyContent: 'space-around' }}>\n        <Typography variant=\"body2\">Add Raindrops</Typography>\n\n        <ButtonGroup variant=\"outlined\" color=\"primary\" size=\"small\">\n          <Button disabled={interval !== null} onClick={dropRain(1)}>1</Button>\n          <Button disabled={interval !== null} onClick={dropRain(10)}>10</Button>\n          <Button disabled={interval !== null} onClick={dropRain(100)}>100</Button>\n          <Button disabled={interval !== null} onClick={dropRain(1000)}>1000</Button>\n          {interval === null ? (\n            <Button variant=\"outlined\" color=\"primary\" onClick={startRain}>Let It Rain</Button>\n          ) : (\n            <Button variant=\"outlined\" color=\"primary\" onClick={stopRain}>Stop The Rain</Button>\n          )}\n        </ButtonGroup>\n        <Typography variant=\"body2\" style={{ textAlign: 'right' }}>\n          Raindrops: {raindrops.length}\n        </Typography>\n      </Toolbar>\n\n      <Container ref={ref} style={{ padding: 0 }}>\n        {/* <Typography variant=\"body2\" style={{ padding: '4px 8px' }}>\n          Raindrops: {raindrops.length}\n        </Typography> */}\n\n        <Divider />\n        <Typography variant=\"h6\" style={{ padding: '8px', textAlign: 'center' }}>\n          Approximation of Pi:\n          <br />\n          Ï€ = 4 * ( <span style={{ color: 'blue' }}>{dropsInside.length || 'Inside'}</span> / <span style={{ color: 'red' }}>{dropsOutside.length || 'Outside'}</span> )\n          <br />\n          <b>{approximation}</b>\n        </Typography>\n\n        <Plot\n          data={[\n            {\n              xy: xy(dropsInside),\n              type: 'pointcloud',\n              name: 'Inside',\n              marker: { color: 'blue' },\n            },\n            {\n              xy: xy(dropsOutside),\n              name: 'Outside',\n              type: 'pointcloud',\n              marker: { color: 'red' },\n            }\n          ]}\n          layout={{\n            xaxis: {\n              range: [0, 1],\n              dtick: 0.5,\n              fixedrange: true,\n              rangemode: \"nonnegative\",\n            },\n            yaxis: {\n              range: [0, 1],\n              dtick: 0.5,\n              fixedrange: true,\n              rangemode: \"nonnegative\",\n            },\n            shapes: [\n              {\n                type: 'path',\n                path: CIRCLE_PATH,\n                line: {\n                  color: 'black'\n                }\n              },\n            ],\n            width: dimensions?.width,\n            height: dimensions?.width,\n            autosize: true,\n            margin: {\n              l: 25,\n              r: 25,\n              b: 25,\n              t: 25,\n            },\n            showlegend: false,\n            annotations: [\n              {\n                xref: 'paper',\n                yref: 'paper',\n                x: 1,\n                xanchor: 'right',\n                y: 1,\n                yanchor: 'bottom',\n                text: `Outside: ${dropsOutside.length}`,\n                showarrow: false,\n                font: {\n                  size: 16,\n                  color: 'red'\n                }\n              },\n              {\n                xref: 'paper',\n                yref: 'paper',\n                x: 0,\n                xanchor: 'left',\n                y: 1,\n                yanchor: 'bottom',\n                text: `Inside: ${dropsInside.length}`,\n                showarrow: false,\n                font: {\n                  size: 16,\n                  color: 'blue'\n                }\n              }\n            ]\n          }}\n          config={{\n            displayModeBar: false\n          }}\n        />\n\n        {/* <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\">\n          <Typography variant=\"h6\">Add Raindrops</Typography>\n\n          <ButtonGroup variant=\"outlined\" color=\"primary\">\n            <Button disabled={interval !== null} onClick={dropRain(1)}>1</Button>\n            <Button disabled={interval !== null} onClick={dropRain(10)}>10</Button>\n            <Button disabled={interval !== null} onClick={dropRain(100)}>100</Button>\n            <Button disabled={interval !== null} onClick={dropRain(1000)}>1000</Button>\n            {interval === null ? (\n              <Button variant=\"outlined\" color=\"primary\" onClick={startRain}>Let It Rain</Button>\n            ) : (\n              <Button variant=\"outlined\" color=\"primary\" onClick={stopRain}>Stop The Rain</Button>\n            )}\n          </ButtonGroup>\n        </Box> */}\n\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\n\n// https://reactjs.org/docs/hooks-faq.html#how-can-i-measure-a-dom-node\n// https://stackoverflow.com/questions/59873782/how-would-you-correctly-set-up-a-typescript-declaration-when-using-usecallback\nexport function useDimensions() {\n  const [dimensions, setDimensions] = React.useState<ClientRect | null>(null);\n\n  const ref = React.useCallback((node: HTMLElement | null) => {\n    if (node !== null) {\n      setDimensions(node.getBoundingClientRect());\n      console.log(node.getBoundingClientRect());\n    }\n  }, []);\n\n  return [dimensions, ref] as const;\n}\n","import React, { useEffect, useRef } from \"react\";\n\n/**\n * Use setInterval with Hooks in a declarative way.\n *\n * @see https://stackoverflow.com/a/59274004/3723993\n * @see https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n */\nexport function useInterval(\n  callback: React.EffectCallback,\n  delay: number | null\n): React.MutableRefObject<number | null> {\n  const intervalRef = useRef<number | null>(null);\n  const callbackRef = useRef(callback);\n\n  // Remember the latest callback:\n  //\n  // Without this, if you change the callback, when setInterval ticks again, it\n  // will still call your old callback.\n  //\n  // If you add `callback` to useEffect's deps, it will work fine but the\n  // interval will be reset.\n\n  useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n\n  // Set up the interval:\n\n  useEffect(() => {\n    if (typeof delay === \"number\") {\n      intervalRef.current = window.setInterval(\n        () => callbackRef.current(),\n        delay\n      );\n\n      // Clear interval if the components is unmounted or the delay changes:\n      return () => window.clearInterval(intervalRef.current || 0);\n    }\n  }, [delay]);\n\n  // In case you want to manually clear the interval from the consuming component...:\n  return intervalRef;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}